{%- macro render(var, prefix=[]) %}
{%-   if var is mapping %}
{%-     for name, value in var | dictsort %}
{{- render(value, prefix + [name]) }}
{%-     endfor %}
{%-   elif var is iterable and (var is not string and var is not mapping) %}
{{ prefix | join("_") | upper }}={{ var | join(",") }}
{#- Healthchecks expects capitalized True/False #}
{%-   elif var is not none %}
{{ prefix | join("_") | upper }}={{ var }}
{%-   endif %}
{%- endmacro -%}

{%- macro render_django(var, prefix=[]) %}
{%-   if var is mapping %}
{%-     for name, value in var | dictsort %}
{{- render_django(value, prefix + [name]) }}
{%-     endfor %}
{%-   elif var is not none %}
{{ prefix | join("_") | upper }}={{ var }}
{%-   endif %}
{%- endmacro -%}

{{- render(healthchecks.config.healthchecks) }}

{%- if healthchecks.config.django %}

# Django config
{{- render_django(healthchecks.config.django) }}
{%- endif %}

{%- set misc = healthchecks.config.misc %}

{%- if (misc.superuser_init_email or misc.superuser_init_email_pillar)
    and (misc.superuser_init_pass or misc.superuser_init_pass_pillar) %}
{%-   set init_conf = {
    "superuser_email": misc.superuser_init_email or pillar.get(misc.superuser_init_email_pillar),
    "superuser_password": misc.superuser_init_pass or pillar.get(misc.superuser_init_pass_pillar),
} %}
# These variables are specific to the linuxserver image
{{- render(init_conf) }}
{%- endif %}
